a <- 9
h <- 2
r <- 4.5
volume_of_square_pan <- a^2* h
volume_of_circular_pan <- pi* r^2*h
vol <- c(volume_of_square_pan, volume_of_circular_pan)
heights <- c(2,2)
ratio = volume_of_square_pan/volume_of_circular_pan
ratio
plot (vol, heights , main="Scatterplot",
xlab="volume ", ylab=" height ")
---
title: "How to Check Your Calculus Homework - Part 1"
author: "Chaman Preet Kaur"
date: "February 04, 2015"
output: pdf_document
---
```{r latex_functions, echo=FALSE}
print_as_latex <- function(r_equation){
r_equation <- gsub("\\*", "", r_equation)
cat(paste("$$",r_equation,"$$"))
}
```
Taking derivatives of functions is generally a matter of applying one or more formulas from a table of derivatives, such as those given in the back of a calculus textbook. This process can involve complicated algebra, so it is easy to make mistakes. Here we look at a simple way to check your work by graphing it against what the derivative should look like, based on a numerical approximation. If your analytical function for the derivative plots on top of the numerical approximation, that is good evidence that it is correct.
```{r d_function, echo=FALSE}
d <- function(FUN, X){
Y <- FUN(X)
numerical_derivative <- function(i) (Y[i+1]-Y[i-1])/(X[i+1]-X[i-1])
interiorPoints <- 2:(length(X) - 1)
c(NA, vapply(interiorPoints, numerical_derivative, numeric(1)), NA)
}
```
# How it works
Say we have an equation for a curve, and we want to estimate the slope of this curve at a given point. Because we have the equation for the curve, we can use it as a function to find the position of the curve at any point. We can find the positions of two points, one slightly to the left of our point of interest, and another slightly to the right. If we draw a line through these two points, its slope will be an approximation of the slope of the tangent to the curve at the center point, assuming that the flanking points are close enough to the center point that the curve is reasonably smooth between them. This is shown in the figure below:
```{r slope_diagram, echo=FALSE}
x <- seq(5, 9, length=100)
pp <- c(6,7,8)
f <- function(x) -x^3 - 2*x^2 + 200*x
df <- function(x) -3*x^2 - 4*x + 200
yspan <- max(abs(f(x) - f(pp[2]))) # put center point in middle of y-axis
plot(x, f(x), type="l", ylim=f(pp[2]) + c(-1,1) * yspan)
m_num <- (f(pp[3]) - f(pp[1]))/(pp[3] - pp[1])
b_num <- f(pp[1]) - m_num * pp[1]
abline(b_num, m_num, lwd=3, lty=2, col="yellow")
m_calc <- df(pp[2])
b_calc <- f(pp[2]) - m_calc * pp[2]
abline(b_calc, m_calc, lty=2, col="red")
points(pp, f(pp), pch=4, lwd=4, col="red")  # draw points on top
points(pp[2], f(pp)[2], cex=2, pch=1, lwd=3, col="green")
```
```{r show_fig1_equation, echo=FALSE, results='asis'}
print_as_latex("-x^3 - 2*x^2 + 200*x")
```
Here the point where we want to estimate the slope is circled in green, and the flankig points are plain red "x"s. The red line is the tangent to the curve at the point of interest; this is what we are trying to estimate. The yellow line passes through the two flanking points. Note that it appears to parallel to the red tangent line quite closely. It is shifted below the red line, but we only care about the slope, so this shift doesn't matter.
This approximation only works if the flanking points are close together. If the flanking points are far apart and the curve has a complicated shape between these points, then the line between the flanking points might not reflect the slope of the tangent at the center point very well at all. But if the flanking points are close enough toghether that the curve between them is almost a straight line, the approximation will be very good.
# Computing numerical derivatives
We can use the approach described above to create a function to compute numerical derivatives:
```{r display_d_function, ref.label='d_function', eval=FALSE, echo=TRUE}
```
This function, named "d", takes two arguments: the function ("FUN") for which we want to estimate the derivative, and a vector of X values over which we will produce estimated slopes. The first step is to call the function on the X values; these are stored in the vector Y. Now we can find (x,y) points by looking in these vectors. Say we want the third (x,y) point; we set `i = 3`, then `X[i]` is the third x-value, and `Y[i]` is the third y-value; we can find the point before it with `i = 2` and the point after it with `i = 4`, repsectively. For any point `i`, we will estimate the slope of its tangent by rise over run of a line through its flanking points, or `(Y[i+1]-Y[i-1])/(X[i+1]-X[i-1])`; we will use the local function `numerical_derivative` to apply that formula to a set of `i` values. There is one minor issue; the very first and the very last points do not have flanking points, so we can only apply our slope-estimating function to the interior points; this is just a sequence of i-values from 2 to one less than the total number of points. Now when we apply our slope function to the indexes of the interior points (using `vapply`), we get a vector of slope values. To make plotting simpler, we add back "not available" values to both ends of this slope vector; this way it will be the same length as the original vector of x values, and this will keep the plot function from complaining that it can't match up the (x,y) pairs for our slope values.
# Plotting functions
Here is some R code to plot a given function, the approximation of its derivative, and the user's guess of the derivative function on a single graph. You can use it to check whether your derivative function is close to the true answer.
```{r plotting_multiple_functions}
plotFdF <- function(x, f, df){
ylim <- range(c(f(x), d(f,x), df(x)), na.rm=TRUE)
plot(x, f(x), type="l", ylim=ylim)  # original function for which we want derivative
lines(x, d(f,x), col="yellow", lwd=4)  # numerical approximation
lines(x, df(x), col="red", lty=2)  # candidate analytical derivative
abline(h=0, lty=3, col="gray")  # gray line showing zero on y-axis
}
```
# A simple example
Say we're given the following cubic polynomial function:
```{r show_simple1_equation, echo=FALSE, results='asis'}
print_as_latex("f(x) = -x^3 - 2*x^2 + 200*x")
```
We'll code that equation as function `f`, and then use our calculus skills to write it's derivatove as function `df`. We provide some reasonable range of x-values to operate over, then call our plotting code. Note that when we make the sequence of x-values, we need to make them close enough together that our approximation will be reasonable; this spacing is specified in the "`by`"" parameter.
```{r simple1}
f <- function(x) x^3 - 8*x^2 - 99*x + 600
df <- function(x) 3*x^2 - 16*x - 99
x <- seq(-10, 15, length=100)
plotFdF(x, f, df)
```
# A more complicated example
Say we need to take the derivative of a ratio of functions:
$$ f(x) = (2 sin(x) - sin(2x)) / (x - sin(x)) $$
Here we apply the quotient rule: if
$$ f(x) = g(x) / h(x) $$
then
$$ f'(x) = (g'(x)*h(x) - g(x)*h'(x)) / (h(x))^2  $$
Set
$$
g(x) = (2 sin(x) - sin(2x))
$$
and
$$
h(x) = (x - sin(x))
$$
So we can break the problem down into three parts:
1. find the derivative of g(x)
2. find the derivative of h(x)
3. use these together with the quotient rule to find the derivative of f(x)
## 1. derivative of g(x)
```{r derivative_of_g}
x <- seq(-10 * pi, 10 * pi, , by=0.01)
g <- function(x) 2 * sin(x) - sin(2*x)
dg <- function(x) 2*(cos(x) - cos(2*x))
plotFdF(x, g, dg)
```
## 2. derivative of h(x)
```{r derivative_of_h}
# use the same x values as before
h <- function(x) x - sin(x)
dh <- function(x) 1 - cos(x)
plotFdF(x, h, dh)
```
## 3. Apply the quotient rule
```{r apply_quotient_rule}
f <- function(x) (2 * sin(x) - sin(2*x)) / (x - sin(x))
df1 = function(x) (dg(x)*h(x) - g(x)*dh(x)) / (h(x))^2
df2 = function(x) ((2*(cos(x) - cos(2*x)) * (x - sin(x))) - (2 * sin(x) - sin(2*x)) * (1 - cos(x)) )/ (x - sin(x))^2
plotFdF(x, f, df2)  # df1 and df2 plot right on top of one another; try it!
```
$$ f'(x) = ((2*(cos(x) - cos(2*x)) * (x - sin(x))) - (2 * sin(x) - sin(2*x)) * (1 - cos(x)) )/ (x - sin(x))^2 $$
---
title: "Latex assignment"
author: "Chaman Preet Kaur"
date: "February 04, 2015"
output: pdf_document
---
The Scenario
====================================================================
You are craving for chocolate cake and want to bake it at home. You drive to safeway to find a pan and there are two of them available. A square cake pan and a circular cake pan both with the same height. The side of the square pan is same as the diameter of the circular pan. How do you decide which pan should you buy in case you want to have more cake.
The Solution
====================================================================
In order to decide on the pan, we compare the volumes of cake baked in a square pan and the circular pan.
Calculations
====================================================================
Volume of square pan is calculated as follows:
$$ a^2 h\ $$
In this case
''a'' = 9 inches (length of side)
''h'' = 2 inches (depth)
Volume of circular cake pan is calculated as follows:
$$ \pi r^2 h\ $$
In this case
''r'' = 4.5 inches radius of circular face
''h'' = 2 inches height
```{r, echo=FALSE}
a <- 9
h <- 2
r <- 4.5
volume_of_square_pan <- a^2* h
volume_of_circular_pan <- pi* r^2*h
vol <- c(volume_of_square_pan, volume_of_circular_pan)
heights <- c(2,2)
plot (vol, heights , main="Scatterplot",
xlab="volume ", ylab=" height ")
```
Conclusion
====================================================================
From the plots and calculation it is evident that volume of a square pan(`volume_of_square_pan`) is more than a circular pan (`volume_of_circular_pan`). Hence, in case you want to have a bigger cake, do not hesitate to choose the square cake pan.
